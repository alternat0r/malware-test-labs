import os
import base64
import zipfile
import six
import inspect
import signal
import sys
import argparse
import shutil
import glob
import platform

def de(input): return base64.b64decode(input).decode("ascii")

directory = os.getcwd()
EXT_D = de("LmRlY29kZQ==")
EXT_E = de("LmVuY29kZQ==")
pwd = de("SFJNVGxBY3ZVWDJ5azZXTjRGT0pEeEx3U2hHZWp0RW1icWlDcFByYW83VjVzWkIwS3VnZG5JMzlZUTFmejgrLw==")
rnd = de("QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLw==")
zip_filename = "malware-samples.zip"
zip_file_path = os.path.join(os.getcwd(), zip_filename)
extract_path = ''
zip_password = 'infected'

etab = str.maketrans(rnd, pwd)
dtab = str.maketrans(pwd, rnd)
	
def extract_zip(input_zip, output_path, password):
	with zipfile.ZipFile(input_zip) as z:	
		for file in z.namelist():
			print(f"[~] Extracting {file}...")
			z.extract(file, path=output_path, pwd=bytes(password, 'utf-8'))
			print(f"[+] Extracted {file}")

def e64(file_path, output_path):
	with open(file_path, "rb") as file:
		file_data = file.read()

	b64_encoded = base64.b64encode(file_data)
	custom_b64_encoded = b64_encoded.decode(de('dXRmLTg=')).translate(etab)

	with open(output_path, "w") as file:
		file.write(custom_b64_encoded)
		
def d64(encoded_file_path, output_path):
    if encoded_file_path.endswith(EXT_E):
        with open(encoded_file_path, "r") as file:
            encoded_data = file.read()

        standard_b64 = encoded_data.translate(dtab)
        file_data = base64.b64decode(standard_b64)

        with open(output_path, "wb") as file:
            file.write(file_data)

def encode():
	for dirpath, dirnames, filenames in os.walk(directory):
		for filename in filenames:
			if filename.endswith(EXT_D):
				new_filename = filename.replace(EXT_D, "")

				file_path = os.path.join(dirpath, new_filename)
				encoded_output_path = os.path.join(dirpath, new_filename + EXT_E)
				e64(file_path, encoded_output_path)
				print("[+] Encoded to: " + encoded_output_path)
				os.remove(file_path)
			else:
				file_path = os.path.join(dirpath, filename)
				encoded_output_path = os.path.join(dirpath, filename + EXT_E)
				e64(file_path, encoded_output_path)
				print("[+] Encoded to: " + encoded_output_path)
				os.remove(file_path)

def decode():
	found = 0;
	for dirpath, dirnames, filenames in os.walk(directory):
		for filename in filenames:
			if filename.endswith(EXT_E):
				found = 1
				new_filename = filename.replace(EXT_E, "")
				decoded_output_path = os.path.join(dirpath, new_filename + EXT_D)
				target_file = os.path.join(dirpath, filename)
				d64(target_file, decoded_output_path)
				print("[+] File decoded to: " + decoded_output_path)
				os.remove(target_file)
	
	if found == 0:
		print("[-] No file to decode.")
	else:
		print("\nThe malware samples folder located at: " + directory)
		print("\nNOTE: Your antivirus software may trigger an alert at this point.\nYou may need to rename the files by removing extension of '.decode' to use the malware sample.")
		print("\nFinished.\n")

def sigint_handler(signal, frame):
    sys.stderr.write('\nInterrupted')
    cleanup(0)


def _cleanup(attr, method, args):
    code = 0
    if hasattr(attr, method):
        try:
            getattr(attr, method)(*args)
        except Exception as exc:
            sys.stderr.write(f"Error cleaning up attribute {repr(attr)}: {exc}")
            code = 1
    return code


def cleanup(code=0):
    for attr in globals().values():
        if not(inspect.isclass(attr) or inspect.isfunction(attr)):
            if not code:
                code |= _cleanup(attr, "__del__", ())
                code |= _cleanup(attr, "__exit__", (None, None, None))
    
    exit(code)

signal.signal(signal.SIGINT, sigint_handler)

def main():
	parser = argparse.ArgumentParser(description="Process some integers.")
	parser.add_argument('--decode', action='store_true',
					help='Decode all files from the given ZIP file.')

	args = parser.parse_args()

	if args.decode:
		print("\n==============================================================================")
		print("ATTENTION!  Before  continuing,  make sure to disable your antivirus software.")
		print("This will prevent the antivirus  from removing any files during the extraction")
		print("of the samples. Once you continue, this may take some times to decode.")
		print("==============================================================================\n")

		if six.PY2:
			raw_input("Press the <Enter> key to continue...")
		else:
			input("Press the <Enter> key to continue...")
		
		if platform.system() == 'Linux':
			command = "cat " + zip_file_path + "* > " + zip_file_path
			os.system(command)
		else:
			print("[~] Merging the ZIP file ...")
			with open(zip_file_path,'wb') as wfd:
				for f in glob.glob(zip_file_path + ".*"):
					with open(f,'rb') as fd:
						shutil.copyfileobj(fd, wfd)

		isExist = os.path.exists(directory)
		if(not isExist):
			os.mkdir(directory)

		isFile = os.path.exists(zip_file_path)
		print(zip_file_path)
		if(isFile):
			print("[+] Extracting .. Please wait")
			extract_zip(zip_file_path, extract_path, zip_password)

		#encode()
		decode()

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write('\nInterrupted')
		cleanup(0)
